var polyg = poly.geometry();

//Safanelli, J.L.; Poppiel, R.R.; Ruiz, L.F.C.; Bonfatti, B.R.; Mello, F.A.O.; Rizzo, R.; DemattÃª, J.A.M.
//Terrain Analysis in Google Earth Engine: A Method Adapted for High-Performance Global-Scale Analysis.
//ISPRS Int. J. Geo-Inf. 2020, 9, 400. DOI: https://doi.org/10.3390/ijgi9060400
//GitHub: https://github.com/zecojls/tagee

// Importing module

var TAGEE = require('users/joselucassafanelli/TAGEE:TAGEE-functions');

// World bounding box

//var bbox = polyg//ee.Geometry.Rectangle({coords: [-180, -60, 180, 60], geodesic: false});

// Water mask

//var hansen_2016 = ee.Image('UMD/hansen/global_forest_change_2016_v1_4')//.select('datamask');
//var hansen_2016_wbodies = hansen_2016.neq(1).eq(0);
//var waterMask = hansen_2016.updateMask(hansen_2016_wbodies);


var main=function(numero){
  var id=table2.filter(ee.Filter.eq("id",numero)).geometry();
  var gridcoll=ee.FeatureCollection(table).filterBounds(id);
  
  
  // Loading SRTM 30 m
  
  var demSRTM1 = ee.Image('USGS/SRTMGL1_003').clip(polyg);
  var demSRTM = demSRTM1.clip(id).rename('DEM');
  
  // Terrain analysis
  
  var DEMAttributes = TAGEE.terrainAnalysis(TAGEE, demSRTM, id);
  var maschera = DEMAttributes.select('Slope').gte(8);
  var DEMAttributes = DEMAttributes.updateMask(maschera);
  
  var f = function(image) {
    var m = image.reduceRegions(gridcoll,ee.Reducer.stdDev(),30);
    return image.reduceRegions(m,ee.Reducer.mean(),30);
  };
  
  
  var iter = function(var1,layer){
    var gridcoll=f(layer);
    
    gridcoll = gridcoll.map(function(feature) {
      return feature.set(var1.concat('_mean'), feature.get('mean'))
    });
    
    return gridcoll.map(function(feature) {
      return feature.set(var1.concat('_std'), feature.get('stdDev'))
    });
  }
  
  //slope, hcv, vcv
  var gridcoll = iter('S',DEMAttributes.select('Slope'));
  var gridcoll = iter('HCv',DEMAttributes.select('HorizontalCurvature'));
  var gridcoll = iter('VCv',DEMAttributes.select('VerticalCurvature'));
  
  //relief
  var reduced = DEMAttributes.select('Elevation').projection().atScale(30);
  var dem= DEMAttributes.select('Elevation').reproject(reduced);
  
  var k1 = dem.focal_max(32.5,'square','pixels',1);
  var k2 = dem.focal_min(32.5,'square','pixels',1);//1km di raggio
  var range = k1.subtract(k2);
  var gridcoll = iter('Rlf',range);
  return gridcoll
}
  
var griglia=main(15)

// Export the FeatureCollection to a KML file.
Export.table.toDrive({
  collection: griglia,
  description:'vectorsToDrive',
  fileFormat: 'CSV'
});

